"use strict";
self["webpackHotUpdateboilerplate"]("critical",{

/***/ "./app/classes/Animation.js":
/*!**********************************!*\
  !*** ./app/classes/Animation.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Animation)
/* harmony export */ });
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/each */ "./node_modules/lodash/each.js");
/* harmony import */ var lodash_each__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_each__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/ScrollTrigger */ "./node_modules/gsap/ScrollTrigger.js");
/* harmony import */ var gsap_DrawSVGPlugin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap/DrawSVGPlugin */ "./node_modules/gsap/DrawSVGPlugin.js");
/* harmony import */ var gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gsap/SplitText */ "./node_modules/gsap/SplitText.js");
/* harmony import */ var _utils_createGlitchChar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/createGlitchChar */ "./app/utils/createGlitchChar.js");






gsap__WEBPACK_IMPORTED_MODULE_2__["default"].registerPlugin(gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__.ScrollTrigger, gsap_DrawSVGPlugin__WEBPACK_IMPORTED_MODULE_4__.DrawSVGPlugin, gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__.SplitText);
class Animation {
  constructor() {}
  /**
   * Anime les flèches SVG au survol des liens
   * Crée un effet de transition où la flèche principale sort en diagonale
   * et une flèche secondaire entre pour la remplacer
   *
   * @param {NodeList|Array} linkContainers - Les conteneurs de liens avec flèches à animer
   */
  animateArrowOnHover(linkContainers) {
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(linkContainers, container => {
      // Sélection des deux états de la flèche
      const arrowDefault = container.querySelector(".arrow");
      const arrowHover = container.querySelector(".arrow__hover");

      // Timeline pour gérer l'animation au survol
      const hoverTimeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
        paused: true
      });

      // Animation de sortie : la flèche par défaut se déplace et disparaît
      hoverTimeline.to(arrowDefault, {
        x: 10,
        y: -10,
        opacity: 0,
        duration: 0.2
      });

      // Animation d'entrée : la flèche de survol apparaît à sa place
      hoverTimeline.to(arrowHover, {
        x: 0,
        y: 0,
        opacity: 1,
        duration: 0.2
      });

      // Déclenche l'animation au survol
      container.addEventListener("mouseenter", () => {
        hoverTimeline.play();
      });

      // Inverse l'animation quand la souris quitte l'élément
      container.addEventListener("mouseleave", () => {
        hoverTimeline.reverse();
      });
    });
  }

  /**
   * Fait apparaitre en fondu et depuis le bas ou le haut un mot
   * @param {Element} textDOMElement - L'élément DOM à faire apparaitre depuis le bas ou le haut.
   * @returns {GSAPTween} - Un mot qui apparait depuis le bas
   */
  animateTextByWords(textDOMElement) {
    if (!textDOMElement) return;
    gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__.ScrollTrigger.create({
      trigger: textDOMElement,
      start: "top bottom",
      onEnter: () => {
        gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__.SplitText.create(textDOMElement, {
          type: "words",
          autoSplit: true,
          onSplit: self => {
            gsap__WEBPACK_IMPORTED_MODULE_2__["default"].from(self.words, {
              yPercent: 100,
              autoAlpha: 0,
              ease: [0.77, 0, 0.175, 1],
              stagger: 0.05
            });
          }
        });
      }
    });
  }

  /**
   * Fait apparaitre en fondu et depuis le bas ou le haut une ligne
   * @param {Element} textDOMElement - L'élément DOM à faire apparaitre depuis le bas ou le haut.
   * @returns {GSAPTween} - Une ligne qui apparait depuis le bas
   */
  animateTextByCharacters(textDOMElement) {
    if (!textDOMElement) return;
    gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__.SplitText.create(textDOMElement, {
      type: "chars",
      autoSplit: true,
      onSplit: self => {
        gsap__WEBPACK_IMPORTED_MODULE_2__["default"].to(self.chars, {
          yPercent: 100,
          autoAlpha: 0,
          ease: [0.77, 0, 0.175, 1],
          stagger: 0.005
        });
      }
    });
  }

  /**
   * Fait apparaitre en fondu et depuis le bas ou le haut une ligne
   * @param {Element} textDOMElement - L'élément DOM à faire apparaitre depuis le bas ou le haut.
   * @returns {GSAPTween} - Une ligne qui apparait depuis le bas
   */
  animateTextByLines(textDOMElement) {
    if (!textDOMElement) return;
    gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__.ScrollTrigger.create({
      trigger: textDOMElement,
      start: "top bottom",
      once: true,
      onEnter: () => {
        gsap_SplitText__WEBPACK_IMPORTED_MODULE_5__.SplitText.create(textDOMElement, {
          type: "lines",
          autoSplit: true,
          onSplit: self => {
            gsap__WEBPACK_IMPORTED_MODULE_2__["default"].from(self.lines, {
              yPercent: 100,
              autoAlpha: 0,
              ease: [0.77, 0, 0.175, 1],
              stagger: 0.05
            });
          }
        });
      }
    });
  }

  /**
   * @param {Element} element - L'élément DOM à faire apparaitre en mode glitch
   * @returns {GSAPTween} - Un mot qui apparait depuis le bas
   */
  animateGlitchText(element) {
    gsap__WEBPACK_IMPORTED_MODULE_2__["default"].set(element, {
      opacity: 1
    });
    gsap_ScrollTrigger__WEBPACK_IMPORTED_MODULE_3__.ScrollTrigger.create({
      trigger: element,
      start: "top bottom",
      once: true,
      onEnter: () => {
        const text = element.dataset.text;
        const chars = text.split("");
        const fakeChars = ".-':_,^=;><+!rc*/z?sLTv)J7(|Fi{C}fI31tlu[neoZ5Yxjya]2ESwqkP6h9d4VpOGbUAKXHm8RD#$Bg0MNWQ%&@".split("");
        const fragment = document.createDocumentFragment(); // Fragment pour éviter les reflows

        element.innerHTML = ""; // Vider le contenu de l'élément

        lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(chars, (char, i) => {
          const {
            charWrapper,
            fakeChar,
            real
          } = (0,_utils_createGlitchChar__WEBPACK_IMPORTED_MODULE_1__.createGlitchChar)(char, fakeChars);
          fragment.appendChild(charWrapper);

          // Animation timeline
          gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
            delay: i * 0.03
          }).set(charWrapper, {
            visibility: "visible"
          }).to(fakeChar, {
            opacity: 1,
            stagger: 0.1,
            duration: 0.1,
            ease: [0.77, 0, 0.175, 1]
          }).to(fakeChar, {
            scaleX: 0,
            stagger: 0.1,
            duration: 0.1,
            transformOrigin: "center left",
            ease: [0.77, 0, 0.175, 1]
          }).to(real, {
            opacity: 1,
            stagger: 0.1,
            duration: 0.1,
            ease: [0.77, 0, 0.175, 1]
          });
        });

        // Une fois tous les éléments créés, les ajouter tous d'un coup à l'élément DOM
        element.appendChild(fragment);
      }
    });
  }
  getAllCards(cardsElements) {
    const elements = {};
    const cards = cardsElements;
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(cards, (card, index) => {
      elements[`card__${index}`] = {}; // Crée un objet pour chaque carte

      const allParts = ["card__arrow__bar", "card__arrow__head__left", "card__arrow__head__right"];
      allParts.forEach(part => {
        const el = card.querySelector(`.${part}`);
        if (el) {
          elements[`card__${index}`][`${part}`] = el;
        }
        for (let i = 0; i <= 3; i++) {
          const preEl = card.querySelector(`.${part}__${i}`);
          if (preEl) {
            elements[`card__${index}`][`${part}__${i}`] = preEl;
          }
        }
      });
    });
    return elements;
  }

  // Fonction pour configurer les animations de chaque carte
  setupCardAnimations(cardsElements) {
    const allSVG = this.getAllCards(cardsElements); // Récupérer tous les SVG
    const ease = [0.77, 0, 0.175, 1];
    const isMobile = window.innerWidth <= 621; // Détection mobile (ajustez la valeur selon vos besoins)

    // Appliquer les animations à chaque carte au survol
    const allCards = cardsElements;
    lodash_each__WEBPACK_IMPORTED_MODULE_0___default()(allCards, (card, index) => {
      const svgElements = allSVG[`card__${index}`]; // Récupère les éléments SVG de la carte actuelle

      // Crée une timeline GSAP
      const tl = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline({
        paused: true
      });
      const delayIncrement = 0.1;
      for (let i = 0; i <= 3; i++) {
        // Ajout des animations GSAP pour chaque élément SVG
        tl.fromTo(svgElements[`card__arrow__bar__${i}`], {
          drawSVG: "0%"
        }, {
          drawSVG: "100%",
          duration: 0.3,
          ease
        }, `start+=${i * delayIncrement}` // Ajouter un décalage rapide entre les animations
        ).fromTo(svgElements[`card__arrow__head__left__${i}`], {
          drawSVG: "0%"
        }, {
          drawSVG: "100%",
          duration: 0.3,
          ease
        }, `start+=${i * delayIncrement + 0.2}` // Le même décalage
        ).fromTo(svgElements[`card__arrow__head__right__${i}`], {
          drawSVG: "0%"
        }, {
          drawSVG: "100%",
          duration: 0.3,
          ease,
          transformOrigin: "top bottom"
        }, `start+=${i * delayIncrement + 0.2}` // Décalage similaire ici
        );
      }
      const linkCard = card.querySelector(".card__footer");

      // Sur mobile : activer l'animation par défaut
      if (isMobile) {
        tl.play(); // Joue l'animation immédiatement sur mobile
      } else {
        // Sur desktop : appliquer l'animation au survol seulement
        linkCard.addEventListener("mouseenter", () => {
          tl.play(); // Joue l'animation lors du survol
        });
        linkCard.addEventListener("mouseleave", () => {
          tl.reverse(); // Inverse l'animation lorsque la souris quitte la carte
        });
      }
    });
  }
  handleHoverAnimation(e, element, state = "hover") {
    if (window.innerWidth <= 621) return;
    const overlay = element.querySelector(".hovered__competence");
    const staticTitle = element.querySelector(".competence__static__title");
    const directionY = this.getMouthDirection(e, element);
    const hoverTimeline = gsap__WEBPACK_IMPORTED_MODULE_2__["default"].timeline();
    if (state === "hover") {
      hoverTimeline.set(overlay, {
        y: directionY < 0 ? "-100%" : "100%"
      }).to(staticTitle, {
        y: directionY < 0 ? "100%" : "-100%",
        opacity: 0,
        duration: 0.05
      }).to(overlay, {
        y: "0%",
        duration: 0.1
      });
    } else if (state === "static") {
      hoverTimeline.set(staticTitle, {
        y: directionY < 0 ? "100%" : "-100%"
      }).to(overlay, {
        y: directionY < 0 ? "-100%" : "100%",
        duration: 0.5
      }).to(staticTitle, {
        opacity: 1,
        y: "0%",
        duration: 0.1
      }, "<+0.2");
    }
  }
  getMouthDirection(e, element) {
    const bounds = element.getBoundingClientRect();
    const fromTop = e.clientY - bounds.top < bounds.height / 2;
    return fromTop ? -1 : 1;
  }
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("c0371fc9a0ba6b8053fd")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,